let field;
let players = [];
let ball;
let gravity = 0.2;
let boostParticles = [];
let goals = [];
let boostPads = [];
let score = [0, 0];
let lastScorer = null;
let resetTimer = 0;

function setup() {
  createCanvas(800, 600);
  field = new Field(400, 300);
  
  // Create players
  players.push(new Car(300, 250, color(30, 144, 255), 'Player 1')); // Blue team
  players.push(new Car(500, 350, color(255, 69, 0), 'Player 2')); // Orange team
  
  // Create ball
  ball = new Ball(400, 300);
  
  // Create goals
  goals.push(new Goal(150, 300, true)); // Blue team goal (left)
  goals.push(new Goal(650, 300, false)); // Orange team goal (right)
  
  // Create boost pads
  // Small pads
  boostPads.push(new BoostPad(-290, -100, 'small'));
  boostPads.push(new BoostPad(-290, 0, 'small'));
  boostPads.push(new BoostPad(-290, 100, 'small'));
  boostPads.push(new BoostPad(290, -100, 'small'));
  boostPads.push(new BoostPad(290, 0, 'small'));
  boostPads.push(new BoostPad(290, 100, 'small'));
  boostPads.push(new BoostPad(-100, -190, 'small'));
  boostPads.push(new BoostPad(0, -190, 'small'));
  boostPads.push(new BoostPad(100, -190, 'small'));
  boostPads.push(new BoostPad(-100, 190, 'small'));
  boostPads.push(new BoostPad(0, 190, 'small'));
  boostPads.push(new BoostPad(100, 190, 'small'));
  boostPads.push(new BoostPad(-100, 0, 'small'));
  boostPads.push(new BoostPad(100, 0, 'small'));
  
  // Big pads in corners
  boostPads.push(new BoostPad(-290, -190, 'big'));
  boostPads.push(new BoostPad(-290, 190, 'big'));
  boostPads.push(new BoostPad(290, -190, 'big'));
  boostPads.push(new BoostPad(290, 190, 'big'));
}

function draw() {
  background(135, 206, 235); // Sky blue background
  
  // Draw field
  field.display();
  
  // Update and display boost pads
  boostPads.forEach(pad => {
    pad.update();
    pad.display();
  });
  
  // Handle game reset after goal
  if (resetTimer > 0) {
    resetTimer--;
    if (resetTimer === 0) {
      resetGame();
    }
  }
  
  // Update and display goals
  goals.forEach(goal => {
    goal.display();
    if (resetTimer === 0 && goal.checkBallInGoal(ball)) {
      if (goal.isLeftSide) {
        score[1]++; // Orange team scores
        lastScorer = "Orange";
      } else {
        score[0]++; // Blue team scores
        lastScorer = "Blue";
      }
      resetTimer = 180; // 3 seconds at 60fps
    }
  });
  
  // Update and display players
  players.forEach(player => {
    player.update();
    player.display();
    player.checkCollisionWithBall(ball);
  });
  
  // Update and display ball
  ball.update();
  ball.display();
  
  // Update and display boost particles
  for (let i = boostParticles.length - 1; i >= 0; i--) {
    boostParticles[i].update();
    boostParticles[i].display();
    if (boostParticles[i].finished()) {
      boostParticles.splice(i, 1);
    }
  }
  
  // Display score and controls
  displayScore();
  if (resetTimer > 0) {
    textAlign(CENTER, CENTER);
    textSize(24);
    fill(255);
    stroke(0);
    strokeWeight(2);
    text(`${lastScorer} team scored!`, width/2, height/2 - 50);
    text(`Resetting in ${Math.ceil(resetTimer/60)}...`, width/2, height/2 - 20);
  }
  displayControls();
}

function resetGame() {
  ball.pos.set(400, 300);
  ball.z = 0;
  ball.vel.set(0, 0);
  ball.velZ = 0;
  
  players[0].pos.set(300, 250);
  players[0].vel.set(0, 0);
  players[0].z = 0;
  players[0].velZ = 0;
  players[0].pitch = 0;
  players[0].jumpState = 0;
  
  players[1].pos.set(500, 350);
  players[1].vel.set(0, 0);
  players[1].z = 0;
  players[1].velZ = 0;
  players[1].pitch = 0;
  players[1].jumpState = 0;
}

function displayScore() {
  textAlign(CENTER, CENTER);
  textSize(32);
  fill(30, 144, 255); // Blue
  stroke(0);
  strokeWeight(2);
  text(score[0], width/2 - 40, 30);
  
  fill(255);
  noStroke();
  textSize(20);
  text("-", width/2, 30);
  
  fill(255, 69, 0); // Orange
  stroke(0);
  strokeWeight(2);
  textSize(32);
  text(score[1], width/2 + 40, 30);
}

function displayControls() {
  textAlign(LEFT, BOTTOM);
  textSize(14);
  fill(255);
  noStroke();
  text("Player 1: WASD + Space (boost) + F (jump)", 10, height - 10);
  textAlign(RIGHT, BOTTOM);
  text("Player 2: Arrow Keys + Shift (boost) + M (jump)", width - 10, height - 10);
}

function keyPressed() {
  if (key === 'p') {
    console.log("Ball:", ball.pos.x, ball.pos.y, ball.z);
    console.log("Players:", players.map(p => [p.pos.x, p.pos.y, p.z]));
  }
}

class Field {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.width = 600;
    this.height = 400;
    this.lineWidth = 4;
    this.isoX = 0.7;
    this.isoY = 0.4;
  }
  
  toIso(x, y) {
    let isoX = (x - y) * this.isoX;
    let isoY = (x + y) * this.isoY;
    return createVector(isoX + this.pos.x, isoY + this.pos.y);
  }
  
  drawIsoRect(x, y, w, h, col) {
    let topLeft = this.toIso(x - w/2, y - h/2);
    let topRight = this.toIso(x + w/2, y - h/2);
    let bottomRight = this.toIso(x + w/2, y + h/2);
    let bottomLeft = this.toIso(x - w/2, y + h/2);
    
    fill(col);
    beginShape();
    vertex(topLeft.x, topLeft.y);
    vertex(topRight.x, topRight.y);
    vertex(bottomRight.x, bottomRight.y);
    vertex(bottomLeft.x, bottomLeft.y);
    endShape(CLOSE);
  }
  
  display() {
    this.drawIsoRect(0, 0, this.width, this.height, color(76, 187, 23));
    stroke(255);
    strokeWeight(this.lineWidth);
    noFill();
    
    let centerTop = this.toIso(0, -this.height/2);
    let centerBottom = this.toIso(0, this.height/2);
    line(centerTop.x, centerTop.y, centerBottom.x, centerBottom.y);
    
    let center = this.toIso(0, 0);
    let radius = 70;
    ellipse(center.x, center.y, radius * this.isoX * 2, radius * this.isoY * 2);
    
    let topLeft = this.toIso(-this.width/2, -this.height/2);
    let topRight = this.toIso(this.width/2, -this.height/2);
    let bottomRight = this.toIso(this.width/2, this.height/2);
    let bottomLeft = this.toIso(-this.width/2, this.height/2);
    
    line(topLeft.x, topLeft.y, topRight.x, topRight.y);
    line(topRight.x, topRight.y, bottomRight.x, bottomRight.y);
    line(bottomRight.x, bottomRight.y, bottomLeft.x, bottomLeft.y);
    line(bottomLeft.x, bottomLeft.y, topLeft.x, topLeft.y);
  }
}

class Car {
  constructor(x, y, carColor, name) {
    this.pos = createVector(x, y);
    this.vel = createVector(0, 0);
    this.z = 0;
    this.velZ = 0;
    this.pitch = 0;
    this.jumpState = 0;
    this.carColor = carColor;
    this.name = name;
    this.speed = 0.5;
    this.maxSpeed = 6;
    this.friction = 0.97;
    this.direction = 0;
    this.rotationSpeed = 0.08;
    this.boosting = false;
    this.boost = 100;
    this.boostRegen = 0.2;
    this.boostForce = 1.5;
    this.isPlayer1 = name === 'Player 1';
  }
  
  update() {
    if (this.z > 0) {
      this.velZ -= gravity;
      this.z += this.velZ;
      if (this.z <= 0) {
        this.z = 0;
        this.velZ = 0;
        this.pitch = 0;
        this.jumpState = 0;
      }
    }
    
    if (this.isPlayer1) {
      if (keyIsDown(65)) this.direction -= this.rotationSpeed; // A
      if (keyIsDown(68)) this.direction += this.rotationSpeed; // D
      if (keyIsDown(87)) { // W
        if (this.z > 0) this.pitch += 0.05;
        else this.applyForce(this.speed);
      }
      if (keyIsDown(83)) { // S
        if (this.z > 0) this.pitch -= 0.05;
        else this.applyForce(-this.speed * 0.6);
      }
      if (keyIsDown(32) && this.boost > 0) { // Space
        this.boosting = true;
        this.boost -= 1;
        this.applyForce(this.boostForce);
        this.createBoostParticle();
      } else {
        this.boosting = false;
      }
      if (keyIsDown(70)) this.jump(); // F
    } else {
      if (keyIsDown(LEFT_ARROW)) this.direction -= this.rotationSpeed;
      if (keyIsDown(RIGHT_ARROW)) this.direction += this.rotationSpeed;
      if (keyIsDown(UP_ARROW)) {
        if (this.z > 0) this.pitch += 0.05;
        else this.applyForce(this.speed);
      }
      if (keyIsDown(DOWN_ARROW)) {
        if (this.z > 0) this.pitch -= 0.05;
        else this.applyForce(-this.speed * 0.6);
      }
      if (keyIsDown(16) && this.boost > 0) { // Shift
        this.boosting = true;
        this.boost -= 1;
        this.applyForce(this.boostForce);
        this.createBoostParticle();
      } else {
        this.boosting = false;
      }
      if (keyIsDown(77)) this.jump(); // M
    }
    
    this.pitch = constrain(this.pitch, -PI/2, PI/2);
    this.vel.mult(this.friction);
    this.pos.add(this.vel);
    
    let halfFieldWidth = field.width / 2 - 20;
    let halfFieldHeight = field.height / 2 - 20;
    if (this.pos.x < -halfFieldWidth) { this.pos.x = -halfFieldWidth; this.vel.x *= -0.5; }
    if (this.pos.x > halfFieldWidth) { this.pos.x = halfFieldWidth; this.vel.x *= -0.5; }
    if (this.pos.y < -halfFieldHeight) { this.pos.y = -halfFieldHeight; this.vel.y *= -0.5; }
    if (this.pos.y > halfFieldHeight) { this.pos.y = halfFieldHeight; this.vel.y *= -0.5; }
    
    if (!this.boosting && this.boost < 100) this.boost += this.boostRegen;
    
    boostPads.forEach(pad => pad.checkPickup(this));
  }
  
  jump() {
    if (this.jumpState === 0) {
      this.velZ = 10;
      this.jumpState = 1;
    } else if (this.jumpState === 1) {
      this.velZ = 10;
      this.jumpState = 2;
    }
  }
  
  applyForce(amount) {
    if (this.z > 0) {
      let forceX = cos(this.direction) * cos(this.pitch) * amount;
      let forceY = sin(this.direction) * cos(this.pitch) * amount;
      let forceZ = sin(this.pitch) * amount;
      this.vel.add(createVector(forceX, forceY));
      this.velZ += forceZ;
    } else {
      let force = p5.Vector.fromAngle(this.direction).mult(amount);
      this.vel.add(force);
    }
    if (this.vel.mag() > this.maxSpeed) this.vel.setMag(this.maxSpeed);
  }
  
  createBoostParticle() {
    let backPos = p5.Vector.fromAngle(this.direction - PI).mult(15).add(this.pos);
    let particleVel = p5.Vector.fromAngle(this.direction - PI).mult(2);
    boostParticles.push(new BoostParticle(backPos.x, backPos.y, particleVel.x, particleVel.y, this.carColor));
  }
  
  display() {
    push();
    let isoPos = field.toIso(this.pos.x, this.pos.y);
    let carZ = this.z * field.isoY;
    translate(isoPos.x, isoPos.y - carZ);
    rotate(this.direction - PI/4);
    
    noStroke();
    fill(this.carColor);
    rectMode(CENTER);
    rect(0, 0, 30, 20); // Rectangular body
    
    fill(135, 206, 235);
    rect(0, -2, 20, 10); // Windows
    
    fill(30);
    ellipse(-12, -10, 8, 5);
    ellipse(12, -10, 8, 5);
    ellipse(-12, 10, 8, 5);
    ellipse(12, 10, 8, 5);
    
    rectMode(CORNER);
    noFill();
    stroke(255);
    strokeWeight(1);
    rect(-15, -20, 30, 5);
    noStroke();
    fill(255, 165, 0);
    rect(-15, -20, map(this.boost, 0, 100, 0, 30), 5);
    pop();
  }
  
  checkCollisionWithBall(ball) {
    let distToBall = p5.Vector.dist(this.pos, ball.pos);
    let zDiff = abs(this.z - ball.z);
    if (zDiff < 20 && distToBall < 30) {
      let collisionAngle = p5.Vector.sub(ball.pos, this.pos).heading();
      let carSpeed = this.vel.mag();
      let force = p5.Vector.fromAngle(collisionAngle).mult(carSpeed * 0.8);
      ball.vel.add(force);
      ball.velZ += this.velZ * 0.5;
      let bounceBack = p5.Vector.fromAngle(collisionAngle - PI).mult(carSpeed * 0.3);
      this.vel.add(bounceBack);
    }
  }
}

class Ball {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.vel = createVector(0, 0);
    this.z = 0;
    this.velZ = 0;
    this.radius = 20;
    this.friction = 0.98;
    this.bounceFactor = 0.8;
  }
  
  update() {
    this.vel.mult(this.friction);
    this.pos.add(this.vel);
    
    this.velZ -= gravity;
    this.z += this.velZ;
    if (this.z < 0) {
      this.z = 0;
      this.velZ = -this.velZ * this.bounceFactor;
      if (Math.abs(this.velZ) < 0.5) this.velZ = 0;
    }
    
    let halfFieldWidth = field.width / 2 - this.radius;
    let halfFieldHeight = field.height / 2 - this.radius;
    if ((this.pos.x < -halfFieldWidth && !this.isInGoalArea("left")) || 
        (this.pos.x > halfFieldWidth && !this.isInGoalArea("right"))) {
      if (this.pos.x < -halfFieldWidth) this.pos.x = -halfFieldWidth;
      if (this.pos.x > halfFieldWidth) this.pos.x = halfFieldWidth;
      this.vel.x *= -this.bounceFactor;
    }
    if (this.pos.y < -halfFieldHeight) { this.pos.y = -halfFieldHeight; this.vel.y *= -this.bounceFactor; }
    if (this.pos.y > halfFieldHeight) { this.pos.y = halfFieldHeight; this.vel.y *= -this.bounceFactor; }
  }
  
  isInGoalArea(side) {
    let goalHeight = 120;
    return (side === "left" && this.pos.x < -field.width/2 && Math.abs(this.pos.y) < goalHeight/2) ||
           (side === "right" && this.pos.x > field.width/2 && Math.abs(this.pos.y) < goalHeight/2);
  }
  
  display() {
    let isoPos = field.toIso(this.pos.x, this.pos.y);
    fill(0, 0, 0, 50);
    noStroke();
    ellipse(isoPos.x, isoPos.y, this.radius * 2 * field.isoX, this.radius * field.isoY);
    
    fill(255);
    stroke(0);
    strokeWeight(1);
    let ballZ = this.z * field.isoY;
    ellipse(isoPos.x, isoPos.y - ballZ, this.radius * 2 * field.isoX, this.radius * field.isoY * 2);
    
    noFill();
    stroke(30);
    arc(isoPos.x, isoPos.y - ballZ, this.radius * 1.8 * field.isoX, this.radius * field.isoY * 1.8, PI * 0.2, PI * 0.8);
    arc(isoPos.x, isoPos.y - ballZ, this.radius * 1.8 * field.isoX, this.radius * field.isoY * 1.8, PI * 1.2, PI * 1.8);
  }
}

class BoostParticle {
  constructor(x, y, vx, vy, particleColor) {
    this.pos = createVector(x, y);
    this.vel = createVector(vx, vy);
    this.life = 255;
    this.decay = random(5, 10);
    this.size = random(4, 8);
    this.color = particleColor;
  }
  
  update() {
    this.pos.add(this.vel);
    this.life -= this.decay;
  }
  
  display() {
    let isoPos = field.toIso(this.pos.x, this.pos.y);
    noStroke();
    let c = color(red(this.color), green(this.color), blue(this.color), this.life);
    fill(c);
    ellipse(isoPos.x, isoPos.y, this.size, this.size);
  }
  
  finished() {
    return this.life < 0;
  }
}

class Goal {
  constructor(x, y, isLeftSide) {
    this.pos = createVector(x, y);
    this.width = 100;
    this.height = 120;
    this.depth = 40;
    this.isLeftSide = isLeftSide;
    this.color = isLeftSide ? color(30, 144, 255, 100) : color(255, 69, 0, 100);
  }
  
  display() {
    push();
    let centerPos = field.toIso(this.isLeftSide ? -field.width/2 - this.depth/2 : field.width/2 + this.depth/2, 0);
    noStroke();
    fill(this.color);
    
    let backTopLeft = field.toIso(this.isLeftSide ? -field.width/2 - this.depth : field.width/2, -this.height/2);
    let backTopRight = field.toIso(this.isLeftSide ? -field.width/2 : field.width/2 + this.depth, -this.height/2);
    let backBottomRight = field.toIso(this.isLeftSide ? -field.width/2 : field.width/2 + this.depth, this.height/2);
    let backBottomLeft = field.toIso(this.isLeftSide ? -field.width/2 - this.depth : field.width/2, this.height/2);
    
    let frontTopLeft = field.toIso(this.isLeftSide ? -field.width/2 - this.depth : field.width/2 + this.depth, -this.height/2);
    let frontTopRight = field.toIso(this.isLeftSide ? -field.width/2 - this.depth : field.width/2 + this.depth, this.height/2);
    let frontBottomRight = field.toIso(this.isLeftSide ? -field.width/2 : field.width/2, this.height/2);
    let frontBottomLeft = field.toIso(this.isLeftSide ? -field.width/2 : field.width/2, -this.height/2);
    
    beginShape();
    vertex(backTopLeft.x, backTopLeft.y);
    vertex(backTopRight.x, backTopRight.y);
    vertex(backBottomRight.x, backBottomRight.y);
    vertex(backBottomLeft.x, backBottomLeft.y);
    endShape(CLOSE);
    
    beginShape();
    vertex(backTopLeft.x, backTopLeft.y);
    vertex(backTopRight.x, backTopRight.y);
    vertex(frontBottomLeft.x, frontBottomLeft.y);
    vertex(frontBottomRight.x, frontBottomRight.y);
    endShape(CLOSE);
    
    beginShape();
    vertex(backTopLeft.x, backTopLeft.y);
    vertex(backBottomLeft.x, backBottomLeft.y);
    vertex(frontTopRight.x, frontTopRight.y);
    vertex(frontTopLeft.x, frontTopLeft.y);
    endShape(CLOSE);
    
    beginShape();
    vertex(backTopRight.x, backTopRight.y);
    vertex(backBottomRight.x, backBottomRight.y);
    vertex(frontBottomRight.x, frontBottomRight.y);
    vertex(frontBottomLeft.x, frontBottomLeft.y);
    endShape(CLOSE);
    pop();
  }
  
  checkBallInGoal(ball) {
    if (this.isLeftSide) {
      return (ball.pos.x < -field.width/2 - ball.radius && Math.abs(ball.pos.y) < this.height/2 - ball.radius/2);
    } else {
      return (ball.pos.x > field.width/2 + ball.radius && Math.abs(ball.pos.y) < this.height/2 - ball.radius/2);
    }
  }
}

class BoostPad {
  constructor(x, y, type) {
    this.pos = createVector(x, y);
    this.type = type;
    this.active = true;
    this.respawnTime = type === 'small' ? 600 : 1800; // 10s or 30s at 60fps
    this.timer = 0;
  }
  
  update() {
    if (!this.active) {
      this.timer--;
      if (this.timer <= 0) this.active = true;
    }
  }
  
  display() {
    let isoPos = field.toIso(this.pos.x, this.pos.y);
    fill(this.active ? color(255, 215, 0) : color(100, 100, 100));
    noStroke();
    ellipse(isoPos.x, isoPos.y, this.type === 'small' ? 10 : 20, this.type === 'small' ? 5 : 10);
  }
  
  checkPickup(car) {
    if (this.active && p5.Vector.dist(this.pos, car.pos) < 20) {
      car.boost = min(car.boost + (this.type === 'small' ? 12 : 100), 100);
      this.active = false;
      this.timer = this.respawnTime;
    }
  }
}